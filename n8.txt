  n8

・解説
  n8 はモードレスなフルスクリーンのテキストエディタです。
  主要な操作や編集方式を MS-DOS 系 OS で有名な Vz 互換にしていますので、MS-DOS
系 OS や Windows などで Vz、Mifes など WordStar 系テキストエディタを使っていた
方には使いやすいと思います。
  各種 Linux ディストリビューション、macOS で動作確認しています。
  また、ターミナルソフト TeraTerm、RLogin、PuTTY での動作も確認しています。
  文字コードは自動判別し、UTF-8 に変換して編集します。

  このドキュメントは ne の man のテキストを元に n8 向けに修正したものです。
  一通り修正はしましたが、ne の場合の動作で現状の n8 と動作が異なる場合があり
ますのでご注意ください。その場合は現状の動作が正しいです。

・起動
  オプションは以下の通りです。

  -j: メッセージを日本語にします。

  -e: メッセージを英語にします。

  -c: ロックファイル(~/.n8/n8_lock)を削除して起動します。
      n8 が全て終了しているにもかかわらず既存のファイルをオープンする際に「既に
      オープンされています。」と表示されてしまう場合、このオプションを付けて起
      動してください。

  -D name=val: 内部変数 name に val を定義します。

  +line: 編集開始する時の行番号を vi 互換方式で指定します。

  ファイルを指定しない場合、ファイル名入力待ちとなり、そこで入力せずに Enter を
押すとファイラーが起動します。

・画面構成
  n8 の画面は最上行以外は基本的にエディタ画面です。最上行は編集ファイルに対する
情報を表示するシステムガイド行です。
  システムガイド行を左から説明します。

  ページングモード
    左端の一文字はページ切替えのキー操作でどういう挙動をするかを示しています。

  P: 通常のページングモード
  S: 文字列検索モード

  インサートモード
    次の一文字は文字を打ち込んだ時に上書きするのか、挿入するのかを示しています。

  i: 挿入モード
  R: 上書きモード

  現在編集行
    次の "00001/  1%" のような表示は現在編集中の行を示します。 / の前にある数字
  は、現在カーソルのある行を 1 から数えた行番号で、後ろの数字はその行がファイル
  全体の大体何％位の位置かを示します。

  現在編集位置
    次の "001[00000020]" のような表示は現在編集中の位置(桁)を示します。最初の数
  字がカーソルにある桁位置を 0 から数えた桁番号で示します。
    [] の中の数字はカーソル位置の文字の文字コードを示し、2 ストローク入力の時は
  その一文字目のコードを示します。

  編集中のファイルのサイズ。
    次の数字は編集中のファイルサイズを示しています。
    この数値は実際にバッファにある文字のバイト数なのですが、UTF-8/LF の場合で計
  算しているので、UTF-8 以外のモードの場合や CRLF モードの場合にサイズは食い違っ
  てしまいます。

  現在の対象ファイル情報
    最後の "1UL:/home/takapyu/n8.txt" のような表示は編集対象の情報を示します。
    数字は編集しているファイルの番号で次の二文字が編集中のファイルの文字コード
  と改行コードの種類を示します。

    E: EUC
    S: SJIS
    J: JIS
    U: UTF-8
    u: UTF-8 BOM 有

    L: LF
    +: CRLF
    C: CR

    その次の一文字はそのファイルを既に変更したかどうかを示します。

    :: まだ変更していない。
    *: 既に変更している。

    そして最後にフルパスで示したファイル名が続きます。

・機能説明
  (大体が Vz と同じなので独自とは言えませんが) n8 独特のフィーチャーを説明しま
す。
  キー操作の説明に例示するキーは全て標準設定に従っています。

  行編集とテキストの変更フラグ
    行の中で編集を行ってもその時点ではまだ修正した事にはなりません。
    カーソル移動のキー操作等によりその行を離れたり、ファイルセーブ等のキー操作
  を実行した時点で始めて その行が更新したのかを調べます。

    つまり間違った文字入力や削除を行ってしまっても行移動するまでならば、元の文
  字列に戻しさえすれば修正した事にはなりません。
    この時、行編集の取り消しのキー操作 (^QL) により、行編集前の状態に戻す事も可
  能です。

  キーボードマクロ
    一連のキー操作をまとめて一つのキーに記憶させる機能です。
    キーボードマクロ登録開始のキー操作 (^_) により登録を開始し、覚えさせる一連
  のキー操作を行った後に、キー操作として登録されていないキーを押した時点で、そ
  のキーにそのマクロを割り当てる事が可能です。

  カーソル位置保持
    カーソルを上下に動かした際にカーソルが行末以降に来る場合、フリーカーソルモー
  ドを有効にしているならば、カーソルは行末を越えても同じ位置にあり、あまりカー
  ソルが左右に揺れて見にくい状態になる事を回避します。

  ※↑は ne のドキュメントのままなのですが、どうもフリーカーソルモードは機能し
    ていないように思います。自分では使わないのでとりあえず現状のままとします。

    フリーカーソルモードが無効の場合でも行末を越える場合以外でも、なるべくカー
  ソル位置が変わらないようになっています。

  ページングモード
    ページ移動のキー操作(^R、^C)にはページングモードが存在します。
    システムガイド行の左端の一文字はこのモードを指し、P の場合は普通のページ切
  替えを意味し、S の場合は、ページ移動のキー操作で前後への検索を行います。

    ページングモード切替えのキー操作 (^@) によって、P と S を切替える事が可能で
  す。

  文字アンドゥー
    文字を削除するキー操作([DEL]など)で削除した文字・文字列は、削除文字バッファ
  にスタックされていきます。
    このバッファにスタックされた文字は削除アンドゥーのキー操作(^U)により復活さ
  せる事が可能です。
    この場合、削除文字バッファが溢れない限りは全て復活できます。
    ただし、上書きを行った文字はこの文字アンドゥーでは復活できません。

  ブロックバッファ
    n8 はブロックバッファもスタック構造を持っています。 つまり、ブロックカット
  のキー操作 (^Y)、ブロックヤンクのキー操作(^KK)は、指定した行範囲をブロックバッ
  ファにスタックします。

    このスタックされたブロックバッファは、積んだ順序と逆の順序でテキストに張り
  付ける事が可能です。

  バックアップファイル
    バックアップ機能を有効にしている場合、ファイルを書き出す時に、元のファイル
  のバックアップをとる機能です。
    バックアップファイルには、元のファイル名(拡張子含む)に、".bak" を付けたファ
  イルにリネームされます。

  文字コード変換
    ファイルの読みだし時は自動的にそのファイルの文字コードを判別し、内部表現で
  ある UTF-8 に変換します。(いわゆる)半角カナの変換も対応しています。
    文字コードの変換は iconv を使用しています。JIS は ISO-2022-JP-2、ShiftJIS
  は CP932 を指定して変換しています。ライブラリによっては UTF-8 変換後の文字が
  想定外の文字になる場合がありますのでご注意ください。

    ファイルセーブ時は読み出した元の文字コードにより書き出します。編集中にも文
  字コードの変更が可能で、その場合変更した文字コードで書き出されます。

    文字コードは自動判定していますが、判定ミスする可能性がありますのでご注意く
  ださい。文字化けした場合、F4 キーを押してオプション設定メニューを出し、正しい
  と思われる文字コードに変更後 [ESC]U で再読み込みしてください。

  ファイラ
    ファイルオープンのキー操作([ESC]Oなど)でファイルを開く場合、ファイル名を入
  力するプロンプトで、そのままリターンキーを押すとファイラが立ち上がります。

  端末への対応の強化
    端末の処理に termcap を利用し、エントリが足りない場合は、VT200 をベースに
  色々追加したシーケンスを使用しています。
    それだけではどうしても対応できない環境の為に、起動時に term.$NE_TERM と
  term.$TERM を読みだします。
    修飾キー(Shift, Ctrl, Alt)とファンクションキーやカーソルキーの組み合わせに
  ついては可能な限り有効になるようにしていますが、動作しない場合は、ne 作者の作
  成した term.rxvt 等を参考にファイルを変更してみてください。
    Windows 用のターミナルソフト上で修飾キーとファンクションキーやカーソルキー
  の組み合わせが機能しない場合、ターミナルソフト側の設定変更で使える場合があり
  ますので、各ターミナルソフトのドキュメントを参照してください。
    なおターミナルソフトや OS 側で各種機能としてすでに割り当てられているキーの
  組み合わせは使用できませんのでご注意ください。

・ユーザーカスタマイズ
  n8 が使用する設定ファイルでパスが指定されていない場合、まずホームディレクトリ
の下の .n8 ディレクトリ(~/.n8/)を調べます。
  次にシステム標準のディレクトリ(/usr/local/etc/n8/)を調べます。
  つまり、各ユーザーのホームの下の .n8 ディレクトリが優先されます。
  これを設定ファイルの検索パスと呼びます。

  パスを含めた場合は、設定ファイルの検索パスは調べられません。

  n8 は起動時に設定ファイルの検索パスの n8rc を読みます。
  つまり最初に ~/.n8/n8rc を探し、無ければ /usr/local/etc/n8/n8rc を探します。

  n8 の標準の設定は Vz ライクな /usr/local/etc/n8/n8rc です。 
  これを ~/.n8/n8rc にコピーしてから設定の変更をしてみてください。
  この設定ファイルではオプション設定のみを行い、キー操作の設定や端末設定を行う
ファイルを呼び出すだけにしています。
  もちろん n8rc のみにこれら全ての設定をいれる事も可能ですがお勧めはしません。
  使用する設定ファイル群を ~/.n8 の下にコピーしてから、設定の変更を行い、n8rc
から呼び出すだけにする方がいいでしょう。
  インストール後 /usr/local/etc/n8 に置かれるファイルは下記の通りです。
  ファイル名    役割
  ------------- -------------------------------------------------------
  n8rc          デフォルトと同じ内容の設定サンプル
  n8rc.ele      ne の作者が使っている設定
  n8rc.tk       n8 の作者が使っている設定

  key.vz        Vz ライクなキーアサイン
  key.ele       ne の作者が使っているキーアサイン
  key.tk        n8 の作者が使っているキーアサイン
  key.eff       ファイラーのキーアサイン
  key.system    システムキーのキーアサイン

  term          端末の汎用設定 (デフォルトと同じ)
  term.kterm    環境変数 NE_TERM か TERM が kterm の時の端末固有の設定
  term.rxvt     環境変数 NE_TERM か TERM が rxvt の時の端末固有の設定
  ------------- --------------------------------------------------------

  設定ファイルの基本的な記述方法は UNIX でよくある行指向の物です。# 以降行末ま
でをコメントとします。

  制御命令は以下の通りです。

  !I file:
    file で示されたファイルを読み込みそれを設定として使います。
    そのファイルを処理し終った後はこの次の行から再開します。
    この時パスが指定されていない場合はまず ~/.n8/file を読もうとし、見つからな
  ければ次に /usr/local/etc/n8/file を読みにいきます。

  !R V: 次の行以降でオプション設定を行います。

  !R D: 次の行以降で [BS] や [DEL]、[UP] などの特殊文字を定義します。
        これにより termcap で吸収しきれない端末依存の問題に対処できます。

  !R K[:region]:
    次の行以降でキーアサイン、つまりキー操作の設定を行います。
    region を省略した場合、エディタのメインでのキーアサインで、sys を指定した場
  合、メニューなどで使用されるキーアサインで、eff を指定した場合、ファイラーで
  使用されるキーアサインを意味します。

  変数は以下の通りです。() は {} と記述する事もできます。

  $(name): 内部変数 name に置換します。

  $*(name): 環境変数 name に置換します。

  $?(hex): 16進数の値 hex をそのままキャラクタコードとして置換します。

・オプション
  設定できるオプションです。[] の中に省略した場合のデフォルト値を示します。

  AnsiColor [On]
    ANSIエスケープシーケンスによる色を用います。

  AutoIndent[On]
    オートインデントを使用します。

  Backfile  [Off]
    バックアップファイルを作成します。

  CRMark    [Off]
    各行の終りのリターンコードを見えるように表示します。 
    ただし、AnsiColor が Off の場合は見づらくなるでしょう。

  FreeCursor[On]
    カーソルが行末尾以降にも移動するフリーカーソルモードを使用します。

  Japanese  [On]
    メニューやメッセージを日本語で表示します。

  NoCase    [Off]
    検索の際、大文字・小文字の区別を行いません。

  Number    [Off]
    行番号を表示します。

  OverWrite [Off]
    カーソル位置に上書きをします。

  TabMark   [Off]
    タブコードを見えるように表示します。

  TabStop   [8]
    タブカラムを設定します。

  PasteMove [Off]
    文字列ペースト後にカーソルを移動します。

  HideExt   [.o.bak]
    ファイラーやタブ補完から除外するファイルの拡張子を指定します。
    複数指定する場合間にスペースは入れないでください。

  UnderLine [Off]
    カーソル行にアンダーラインを表示します。

  Locale
    n8 で使用する文字ロケールを設定します。
    指定が無い場合、環境変数 LANG があればその値、なければ ja_JP.UTF-8 を設定
  します。

  以下は色指定です。指定がない場合標準色の白となります。
  0: 黒、1:赤、2:緑、3:黄、4:青、5:紫、6:水色、7:白
  B: ボールド、U:アンダーライン、R:反転

  col_block     [6R]
    ブロックモードの色です。

  col_linenum   [4]
    行番号の色です。

  col_ctrl      [4]
    制御文字の色です。

  col_crmark    [4]
    行末マークの色です。

  col_tab       [4]
    タブマークの色です。

  col_sysmsg    [B]
    システムメッセージの色です。

  col_search    [3R]
    置換時の対象文字列の色です。

  col_menuc     [6R]
    メニューのカーソルの色です。

  col_menun     []
   メニューの通常の文字の色です。

  col_eff_dirc  [3R]
    ファイラーのディレクトリにカーソルがある時の色です。

  col_eff_dirn  [6]
    ファイラーのディレクトリの色です。

  col_eff_normc [3R]
    ファイラーのカーソルの色です。

  col_eff_normn []
    ファイラーの通常の文字の色です。

・キーアサイン
  ファイル処理
  ^KW [F02]   file_toggle
    現在編集中のファイルをトグルで切り替えます。

  ^KT [F03]   file_select
    現在編集中のファイルをメニューで選択して切り替えます。

  [ESC]O      file_open
    テキストをオープンします。
    この時にファイル名を聞いてくるのですが、ここで何も入力せずにリターンを押す
  とファイラーモードに移ります。
    ファイル名入力時にタブキーでファイル名補完ができます。
    ファイル名補完ですが、同じファイル名が複数ある場合 bash とは異なりファイル
  リストは出ません。タブキーを押すたびにファイル名が切り替わります。

    既にオープンしたファイルを指定した場合は、そのテキストが編集対象のテキスト
  になります。

  [ESC]C      file_close
    対象のテキストをクローズします。
    この時、修正フラグが立っている場合はセーブするかどうか聞いてきます。
    Y もしくはリターンを押せばセーブし、N もしくはスペースでセーブしません。
    この時 ESC を押すとこの操作を取り消して、編集に戻ります。

  [ESC]L      file_copen
    現在編集中のファイルを閉じ、新しく別のファイルを開きます。
    ただし、新しいファイルを開く事ができない場合、元のファイルは閉じられません。

  [ESC]S      file_save
    現在編集中のファイルを保存します。 

  [ESC]Q      file_quit
    現在の編集は破棄して終了します。
    この時、修正フラグが立っている場合は破棄してよいかどうか聞いてきます。

  [ESC]P      file_rename
    現在編集中のテキストのファイル名を変更します。 変更を行うとファイルの変更フ
  ラグが立ちます。

  [ESC]U      file_undo
    編集を放棄して同じファイル名のファイルを再度オープンします。 Vz と違いカー
  ソル位置は移動しません。

  [ESC]I      file_insert
    カーソルのある行にファイルを挿入します。

  [ESC]X      file_aclose
    全てのファイルを一括クローズします。 変更フラグの立っているファイルのみ保存
  するかを確認をします。

  カーソル移動
  ^E [UP]     cursor_up

  ^X [DOWN]   cursor_down

  ^S [LEFT]   cursor_left

  ^D [RIGHT]  cursor_right
    カーソルを上下左右へ移動します。

  ^A          cursor_tkprev

  ^F          cursor_tknext
    カーソルを前、次の単語の先頭へ移動します。

  ^QS [HOME]  cursor_sleft

  ^QD [END]   cursor_sright
    カーソルを行の先頭、最後へ移動します。

  ^W          cursor_rup [lines]

  ^Z          cursor_rdown [lines]
    表示しているテキストをそのまま上下にスクロールさせ、カーソルの表示位置を変
  えずに行を移動させます。

  ^R [PGUP]   cursor_pup

  ^C [PGDN]   cursor_pdown
    ページングモードによってかわりますが、通常のページモードの場合は、カーソル
  の表示位置を変えずにテキストを 1 ページ上下に移動します。
    この時 1 ページとは行の数 -1 を意味します。
    サーチモードの場合はそれぞれ上方向・下方向への検索を行います。

  ^QE         cursor_sup

  ^QX         cursor_sdown
    カーソルを画面の上端、下端へ移動します。

  ^QR         cursor_top

  ^QC         cursor_bottom
    カーソルをテキストの先頭、末尾に移動します。 行ジャンプ

  ^QP         jump_before [slot]
    直前に記憶したカーソル位置に移動します。 このカーソル位置の記憶は、^QR ^QC
  ^QF ^QM ^QP ^QJ ^Q1～4で行われます。

  ^QM         jump_mark [slot]
    今のカーソル位置を記憶します。

  ^QJ         jump_line [line]
    指定した行番号にカーソルを移動します。

  ^K1～4      jump_mark [slot]
    今のカーソル位置をそれぞれ1番～4番のマークスロットに登録します。

  ^Q1～4      jump_before [slot]
    それぞれ1番～4番のマークスロットに登録された位置にカーソルを移動します。

  ^QG         jump_tag
    カーソルの指してる行にタグ情報が含まれている場合、そのタグ情報の指すファイ
  ル・行番号に移動します。

  編集
  ^M [CR]     line_cr
    カーソルの位置でその行を切ってリターンコードを挿入し、残りを次の新しい行に
  します。
    オートインデントが有効ならば次の新しい行には、元の行の先頭のスペース・タブ
  が移されます。

  ^U          char_undo
    直前に削除した文字や単語をカーソルの位置に挿入させます。

  ^P          char_input
    制御文字を入力します。

  ^N          line_new
    カーソルの位置 (正確にはカーソルのある行の直前) に新しい行を挿入します。

  ^QL         line_undo
    行編集を取り消し、編集前の状態にします。

  削除
  ^H [BS]     del_bs
    カーソルの直前の一文字を削除します。

  ^G [DEL]    del_char
    カーソルの位置の一文字を削除します。

  ^QH         del_tkprev

  ^T          del_tknext
    それぞれカーソルの直前・位置の単語を削除します。

  ^QT         del_sleft

  ^QY         del_sright
    それぞれカーソルから行頭・行末までを削除します。 

  ^B [F10]    block_start
    カーソル位置(正確にはその行の直前)を基準とした ブロック指定モードに
    なります。

  ^Y [F08]    block_cut
    カーソルの行もしくは、ブロック指定モードの場合そのブロックを、編集テキスト
  から削除し、ブロックバッファにスタックしていきます。

  ^J [F09]    block_paste
    ブロックバッファにスタックされた文字列があるならば、カーソルの位置に挿入し、
  そのスタックを破棄します。

  ^KK         block_yank
    カーソルの行もしくは、ブロック指定モードの場合そのブロックを、編集テキスト
  を変更せずに、ブロックバッファにスタックしていきます。
    ^Y block_cut と違うのは編集テキストを変更しない点です。

  ^KC         block_copy
    ブロックバッファにスタックされた文字列があるならば、カーソルの位置に挿入し
  ます。
    ^J block_paste と違う点は、挿入したスタックはそのまま変更しない点です。

  ^KY         block_kill
    ブロックバッファの全てのスタックを破棄します。

  ^KY         block_chlast
    ブロックの先頭と末尾を交換し移動します。

  ^KD         block_dup
    カーソルの行もしくは、ブロック指定モードの場合そのブロックを、そのまま複写
  し編集テキストに挿入します。

  検索・置換
  ^@          search_paging
    ページングモードを切り替えます。
    通常のページモードとサーチモードのみがあります。
    ハーフページやタイトルサーチなどの機能はありません。

  ^QF [F06]   search_in
    検索する文字列を指定します。
    この時文字列を指定するのみで検索はしません。
    文字列が指定された場合はページングモードをサーチモードにします。

  ^QA [F07]   search_repl
    文字列を置換します。

  ^QO         search_repl_redo
    直前に行った文字列置換を再実行します。

  ^L [F05]    search_getword
    カーソル位置の単語を検索文字列として取得します。

              search_prev

              search_next
    上方向・下方向への検索を行います。

  雑多な処理
  ^_          misc_kmacro
    キーボードマクロの設定を開始します。

  ^V [INS]    opt_set "OverWrite"
    挿入モードと上書きモードを切り替えます。

  [ESC]E      misc_exec
    子プロセスを実行します。

  [F01]       menu_file
    ファイル操作のメニューを出します。

  [F04]       menu_option
    オプション設定・確認のメニューを出します。

  ^KI         opt_tab
    タブのカラム数を指定します。

  [ESC]D      misc_redraw
    画面を際描画します。

  メニュー・文字列入力時
  [ESC]       escape
    メニューなどを終了します。

  [CR]        return
    メニューの選択、文字列入力の決定などをします。

  ^E [UP]     cursor_up

  ^X [DOWN]   cursor_down
    メニューの場合はメニューカーソルを上下に移動します。 
    文字列入力時はヒストリーの選択を行います。

  ^S [LEFT]   cursor_left

  ^D [RIGHT]  cursor_right
    文字列入力時は、カーソルを左右に移動します。

  ^R          cursor_pup

  ^C          cursor_pdown
    メニューの場合、上下にページ移動します。

  ^W          cursor_rup

  ^Z          cursor_rdown
    メニューの場合、上下にロール移動します。

  ^QR         cursor_top

  ^QC         cursor_bottom
    メニューの場合、メニューの上端・下端に移動します。

  ^QS [HOME]  cursor_sleft

  ^QD [END]   cursor_sright
    文字列入力時、カーソルを左端・右端に移動します。

  ^H [BS]     char_bs
    直前の文字を一文字削除します。

  ^G [DEL]    char_del
    カーソル位置の文字を一文字削除します。

  [TAB]
    新規ファイル名入力時はファイル名補完を実行します。

  ファイラ使用時
  [ESC]       escape
    ファイラを終了します。

  [CR]        return
    ファイルを指す場合そのファイルをオープンし、ディレクトリを指す場合そのディ
  レクトリに移動します。

  ^E [UP]     cursor_up

  ^X [DOWN]   cursor_down
    カーソルを上下に移動します。

  ^R          cursor_pup

  ^C          cursor_pdown
    カーソルを上下にページ移動します。

  ^W          cursor_rup

  ^Z          cursor_rdown
    カーソルを上下にロール移動します。

  ^QR         cursor_top

  ^QC         cursor_bottom
    カーソルを上端・下端に移動します。

  ^QE         cursor_sup

  ^QX         cursor_sdown
    カーソルを画面の上端・下端に移動します。

  w           window_num
    ウインドウの数を 1 枚と 2 枚に切り替えます。

  [TAB] [LEFT] [RIGHT]などwindow_change
    ウインドウが 2 枚ある場合、他方のウインドウにカーソルを移します。

  x h         Exec
    子プロセスを実行します。

  @           dir_reread
    ディレクトリを再読み込みし再表示します。

  k           dir_make
    ディレクトリを作成します。

  l           dir_change
    ディレクトリを指定して移動します。

  c           file_copy
    ファイルを複写します。

  m           file_move
    ファイルを移動します。

  v
    ファイルを環境変数 PAGER で指定されたページャーで参照します。

  d           file_del
    ファイルを削除します。

  r           file_rename
    ファイル名を変更します。

  [SPACE]     mark_change
    ファイル・ディレクトリをマークします。
    一つでもマークがある状態だと、ファイルの複写・移動・削除は、それぞれマーク
  に対して処理を行います。

  *           mark_achange
    マークが一つでもある状態だとマークを全て消して、マークがない状態だと全ての
  ファイルのみをマークします。

・環境変数
  HOME   n8rc ファイルを捜し出す為に利用されます。

  SHELL  n8 から外部プロセスを呼び出す際に使用されます。

  NE_TERM
         n8 独自の端末設定を行う場合に使用されます。

  TERM   termcap を用いて端末エントリを読み出す際に使用されます。
         NE_TERM が指定されていない場合は、n8 独自の端末設定を行う場合にも使用
       されます。

・関連ファイル
  ~/.n8/, /usr/local/etc/n8/
         パス指定しない設定ファイルの読み込み時に検索するディレクトリ

  ~/.n8/n8rc, /usr/local/etc/n8/n8rc
         起動時に読み込まれる設定ファイル

  ~/.n8/n8_lock
         ロックファイル

・最後に
  大本の NxEdit の作者 Ｎｅｃｏ＠任天堂さん、根橋 勲＠セイコーエプソンさん、ne
の作者 erukiti さんに感謝します。
  ne_doc/ に ne のドキュメント、ne_doc/old_doc に NxEdit のドキュメントがあり
ます。
  lib/ ディレクトリのコードは別のライセンスです。詳しくは lib/README.jp を参照
して下さい。

                                                                       takapyu
